/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults, RouterHistory } from "@stencil/router";
import { Track } from "./global/models";
export namespace Components {
    interface AppRoot {
    }
    interface CacheImg {
        "alt": string;
        "classes"?: string;
        "placeholder"?: string;
        "src": string;
    }
    interface MenuToggle {
        "showing": boolean;
        "toggle": () => void;
        "toggling": () => void;
    }
    interface ModalPrompt {
        "close": (string) => void;
        "header": string;
        "show_cancel"?: boolean;
        "show_input"?: boolean;
    }
    interface PageAlbums {
        "match": MatchResults;
    }
    interface PageArtists {
        "match": MatchResults;
    }
    interface PageGenres {
    }
    interface PageHome {
    }
    interface PageNowPlaying {
    }
    interface PagePlaylist {
        "history": RouterHistory;
        "match": MatchResults;
    }
    interface PageProfile {
        "match": MatchResults;
    }
    interface PageSettings {
    }
    interface PageTracks {
        "match": MatchResults;
    }
    interface PlayButton {
        "paused": boolean;
        "toggle_playing": () => void;
    }
    interface PlayContainer {
        "click_handler": () => void;
        "track": Track;
    }
    interface PlayerControls {
        "add_next_in_queue": (track: Track) => Promise<void>;
        "append_to_queue": (tracks: Array<Track>) => Promise<void>;
        "pause": () => Promise<void>;
        "play": () => Promise<void>;
        "play_next_track": () => Promise<void>;
        "play_previous_track": () => Promise<void>;
        "set_queue": (tracks: Array<Track>) => Promise<void>;
        "set_track": (track: Track) => Promise<void>;
    }
    interface PopupMenu {
        "hide": () => Promise<void>;
    }
    interface PopupMenuItem {
        "click_action": (any, HTMLPopupMenuElement, MouseEvent) => void;
        "contains_submenu": boolean;
        "data": any;
    }
    interface ProgressBar {
        "current_time": number;
        "progress": number;
        "seek_handler": (number) => void;
        "total_time": number;
    }
    interface ProgressDot {
        "parent": HTMLDivElement;
        "progress": number;
        "seek_handler": (number) => void;
    }
    interface TrackStats {
    }
    interface VirtualScrollTracks {
        "generate_popup_menu": (Track) => HTMLPopupMenuElement;
        "playing_track_handler": () => void;
        "tracks": Array<Track>;
    }
    interface VolumeDot {
        "parent": HTMLDivElement;
        "volume": number;
        "volume_handler": (volume: number) => void;
    }
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLCacheImgElement extends Components.CacheImg, HTMLStencilElement {
    }
    var HTMLCacheImgElement: {
        prototype: HTMLCacheImgElement;
        new (): HTMLCacheImgElement;
    };
    interface HTMLMenuToggleElement extends Components.MenuToggle, HTMLStencilElement {
    }
    var HTMLMenuToggleElement: {
        prototype: HTMLMenuToggleElement;
        new (): HTMLMenuToggleElement;
    };
    interface HTMLModalPromptElement extends Components.ModalPrompt, HTMLStencilElement {
    }
    var HTMLModalPromptElement: {
        prototype: HTMLModalPromptElement;
        new (): HTMLModalPromptElement;
    };
    interface HTMLPageAlbumsElement extends Components.PageAlbums, HTMLStencilElement {
    }
    var HTMLPageAlbumsElement: {
        prototype: HTMLPageAlbumsElement;
        new (): HTMLPageAlbumsElement;
    };
    interface HTMLPageArtistsElement extends Components.PageArtists, HTMLStencilElement {
    }
    var HTMLPageArtistsElement: {
        prototype: HTMLPageArtistsElement;
        new (): HTMLPageArtistsElement;
    };
    interface HTMLPageGenresElement extends Components.PageGenres, HTMLStencilElement {
    }
    var HTMLPageGenresElement: {
        prototype: HTMLPageGenresElement;
        new (): HTMLPageGenresElement;
    };
    interface HTMLPageHomeElement extends Components.PageHome, HTMLStencilElement {
    }
    var HTMLPageHomeElement: {
        prototype: HTMLPageHomeElement;
        new (): HTMLPageHomeElement;
    };
    interface HTMLPageNowPlayingElement extends Components.PageNowPlaying, HTMLStencilElement {
    }
    var HTMLPageNowPlayingElement: {
        prototype: HTMLPageNowPlayingElement;
        new (): HTMLPageNowPlayingElement;
    };
    interface HTMLPagePlaylistElement extends Components.PagePlaylist, HTMLStencilElement {
    }
    var HTMLPagePlaylistElement: {
        prototype: HTMLPagePlaylistElement;
        new (): HTMLPagePlaylistElement;
    };
    interface HTMLPageProfileElement extends Components.PageProfile, HTMLStencilElement {
    }
    var HTMLPageProfileElement: {
        prototype: HTMLPageProfileElement;
        new (): HTMLPageProfileElement;
    };
    interface HTMLPageSettingsElement extends Components.PageSettings, HTMLStencilElement {
    }
    var HTMLPageSettingsElement: {
        prototype: HTMLPageSettingsElement;
        new (): HTMLPageSettingsElement;
    };
    interface HTMLPageTracksElement extends Components.PageTracks, HTMLStencilElement {
    }
    var HTMLPageTracksElement: {
        prototype: HTMLPageTracksElement;
        new (): HTMLPageTracksElement;
    };
    interface HTMLPlayButtonElement extends Components.PlayButton, HTMLStencilElement {
    }
    var HTMLPlayButtonElement: {
        prototype: HTMLPlayButtonElement;
        new (): HTMLPlayButtonElement;
    };
    interface HTMLPlayContainerElement extends Components.PlayContainer, HTMLStencilElement {
    }
    var HTMLPlayContainerElement: {
        prototype: HTMLPlayContainerElement;
        new (): HTMLPlayContainerElement;
    };
    interface HTMLPlayerControlsElement extends Components.PlayerControls, HTMLStencilElement {
    }
    var HTMLPlayerControlsElement: {
        prototype: HTMLPlayerControlsElement;
        new (): HTMLPlayerControlsElement;
    };
    interface HTMLPopupMenuElement extends Components.PopupMenu, HTMLStencilElement {
    }
    var HTMLPopupMenuElement: {
        prototype: HTMLPopupMenuElement;
        new (): HTMLPopupMenuElement;
    };
    interface HTMLPopupMenuItemElement extends Components.PopupMenuItem, HTMLStencilElement {
    }
    var HTMLPopupMenuItemElement: {
        prototype: HTMLPopupMenuItemElement;
        new (): HTMLPopupMenuItemElement;
    };
    interface HTMLProgressBarElement extends Components.ProgressBar, HTMLStencilElement {
    }
    var HTMLProgressBarElement: {
        prototype: HTMLProgressBarElement;
        new (): HTMLProgressBarElement;
    };
    interface HTMLProgressDotElement extends Components.ProgressDot, HTMLStencilElement {
    }
    var HTMLProgressDotElement: {
        prototype: HTMLProgressDotElement;
        new (): HTMLProgressDotElement;
    };
    interface HTMLTrackStatsElement extends Components.TrackStats, HTMLStencilElement {
    }
    var HTMLTrackStatsElement: {
        prototype: HTMLTrackStatsElement;
        new (): HTMLTrackStatsElement;
    };
    interface HTMLVirtualScrollTracksElement extends Components.VirtualScrollTracks, HTMLStencilElement {
    }
    var HTMLVirtualScrollTracksElement: {
        prototype: HTMLVirtualScrollTracksElement;
        new (): HTMLVirtualScrollTracksElement;
    };
    interface HTMLVolumeDotElement extends Components.VolumeDot, HTMLStencilElement {
    }
    var HTMLVolumeDotElement: {
        prototype: HTMLVolumeDotElement;
        new (): HTMLVolumeDotElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "cache-img": HTMLCacheImgElement;
        "menu-toggle": HTMLMenuToggleElement;
        "modal-prompt": HTMLModalPromptElement;
        "page-albums": HTMLPageAlbumsElement;
        "page-artists": HTMLPageArtistsElement;
        "page-genres": HTMLPageGenresElement;
        "page-home": HTMLPageHomeElement;
        "page-now-playing": HTMLPageNowPlayingElement;
        "page-playlist": HTMLPagePlaylistElement;
        "page-profile": HTMLPageProfileElement;
        "page-settings": HTMLPageSettingsElement;
        "page-tracks": HTMLPageTracksElement;
        "play-button": HTMLPlayButtonElement;
        "play-container": HTMLPlayContainerElement;
        "player-controls": HTMLPlayerControlsElement;
        "popup-menu": HTMLPopupMenuElement;
        "popup-menu-item": HTMLPopupMenuItemElement;
        "progress-bar": HTMLProgressBarElement;
        "progress-dot": HTMLProgressDotElement;
        "track-stats": HTMLTrackStatsElement;
        "virtual-scroll-tracks": HTMLVirtualScrollTracksElement;
        "volume-dot": HTMLVolumeDotElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface CacheImg {
        "alt"?: string;
        "classes"?: string;
        "placeholder"?: string;
        "src"?: string;
    }
    interface MenuToggle {
        "showing"?: boolean;
        "toggle"?: () => void;
        "toggling"?: () => void;
    }
    interface ModalPrompt {
        "close"?: (string) => void;
        "header"?: string;
        "show_cancel"?: boolean;
        "show_input"?: boolean;
    }
    interface PageAlbums {
        "match"?: MatchResults;
    }
    interface PageArtists {
        "match"?: MatchResults;
    }
    interface PageGenres {
    }
    interface PageHome {
    }
    interface PageNowPlaying {
    }
    interface PagePlaylist {
        "history"?: RouterHistory;
        "match"?: MatchResults;
    }
    interface PageProfile {
        "match"?: MatchResults;
    }
    interface PageSettings {
    }
    interface PageTracks {
        "match"?: MatchResults;
    }
    interface PlayButton {
        "paused"?: boolean;
        "toggle_playing"?: () => void;
    }
    interface PlayContainer {
        "click_handler"?: () => void;
        "track"?: Track;
    }
    interface PlayerControls {
    }
    interface PopupMenu {
    }
    interface PopupMenuItem {
        "click_action"?: (any, HTMLPopupMenuElement, MouseEvent) => void;
        "contains_submenu"?: boolean;
        "data"?: any;
    }
    interface ProgressBar {
        "current_time"?: number;
        "progress"?: number;
        "seek_handler"?: (number) => void;
        "total_time"?: number;
    }
    interface ProgressDot {
        "parent"?: HTMLDivElement;
        "progress"?: number;
        "seek_handler"?: (number) => void;
    }
    interface TrackStats {
    }
    interface VirtualScrollTracks {
        "generate_popup_menu"?: (Track) => HTMLPopupMenuElement;
        "playing_track_handler"?: () => void;
        "tracks"?: Array<Track>;
    }
    interface VolumeDot {
        "parent"?: HTMLDivElement;
        "volume"?: number;
        "volume_handler"?: (volume: number) => void;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "cache-img": CacheImg;
        "menu-toggle": MenuToggle;
        "modal-prompt": ModalPrompt;
        "page-albums": PageAlbums;
        "page-artists": PageArtists;
        "page-genres": PageGenres;
        "page-home": PageHome;
        "page-now-playing": PageNowPlaying;
        "page-playlist": PagePlaylist;
        "page-profile": PageProfile;
        "page-settings": PageSettings;
        "page-tracks": PageTracks;
        "play-button": PlayButton;
        "play-container": PlayContainer;
        "player-controls": PlayerControls;
        "popup-menu": PopupMenu;
        "popup-menu-item": PopupMenuItem;
        "progress-bar": ProgressBar;
        "progress-dot": ProgressDot;
        "track-stats": TrackStats;
        "virtual-scroll-tracks": VirtualScrollTracks;
        "volume-dot": VolumeDot;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "cache-img": LocalJSX.CacheImg & JSXBase.HTMLAttributes<HTMLCacheImgElement>;
            "menu-toggle": LocalJSX.MenuToggle & JSXBase.HTMLAttributes<HTMLMenuToggleElement>;
            "modal-prompt": LocalJSX.ModalPrompt & JSXBase.HTMLAttributes<HTMLModalPromptElement>;
            "page-albums": LocalJSX.PageAlbums & JSXBase.HTMLAttributes<HTMLPageAlbumsElement>;
            "page-artists": LocalJSX.PageArtists & JSXBase.HTMLAttributes<HTMLPageArtistsElement>;
            "page-genres": LocalJSX.PageGenres & JSXBase.HTMLAttributes<HTMLPageGenresElement>;
            "page-home": LocalJSX.PageHome & JSXBase.HTMLAttributes<HTMLPageHomeElement>;
            "page-now-playing": LocalJSX.PageNowPlaying & JSXBase.HTMLAttributes<HTMLPageNowPlayingElement>;
            "page-playlist": LocalJSX.PagePlaylist & JSXBase.HTMLAttributes<HTMLPagePlaylistElement>;
            "page-profile": LocalJSX.PageProfile & JSXBase.HTMLAttributes<HTMLPageProfileElement>;
            "page-settings": LocalJSX.PageSettings & JSXBase.HTMLAttributes<HTMLPageSettingsElement>;
            "page-tracks": LocalJSX.PageTracks & JSXBase.HTMLAttributes<HTMLPageTracksElement>;
            "play-button": LocalJSX.PlayButton & JSXBase.HTMLAttributes<HTMLPlayButtonElement>;
            "play-container": LocalJSX.PlayContainer & JSXBase.HTMLAttributes<HTMLPlayContainerElement>;
            "player-controls": LocalJSX.PlayerControls & JSXBase.HTMLAttributes<HTMLPlayerControlsElement>;
            "popup-menu": LocalJSX.PopupMenu & JSXBase.HTMLAttributes<HTMLPopupMenuElement>;
            "popup-menu-item": LocalJSX.PopupMenuItem & JSXBase.HTMLAttributes<HTMLPopupMenuItemElement>;
            "progress-bar": LocalJSX.ProgressBar & JSXBase.HTMLAttributes<HTMLProgressBarElement>;
            "progress-dot": LocalJSX.ProgressDot & JSXBase.HTMLAttributes<HTMLProgressDotElement>;
            "track-stats": LocalJSX.TrackStats & JSXBase.HTMLAttributes<HTMLTrackStatsElement>;
            "virtual-scroll-tracks": LocalJSX.VirtualScrollTracks & JSXBase.HTMLAttributes<HTMLVirtualScrollTracksElement>;
            "volume-dot": LocalJSX.VolumeDot & JSXBase.HTMLAttributes<HTMLVolumeDotElement>;
        }
    }
}
